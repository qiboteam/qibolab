@startuml multiqubit
!pragma layout smetana
title qibolab

package runcards {
    entity multiqubit.yml  <<(y, orchid)>> {
        nqubits
        description
        settings
        topology
        channels
        qubit_channel_map
        instruments
        native_gates
        characterization
    }
}
package instruments {
    package instruments/abstract.py{
        class AbstractInstrument{
            name
            address
            is_connected
            signature
            device
            --
            {abstract} connect
            {abstract} setup
            {abstract} start
            {abstract} stop
            {abstract} disconnect
            --
            __init__(name, address)
        }
    }
    package qblox.py{
        abstract class QRM extends AbstractInstrument{
            connect()
            set_device_parameter(parameter: str, value)
            setup(**kwargs)
            process_pulse_sequence(channel_pulses, nshots)
            generate_waveforms_from_pulse(pulse, modulate = True)
            upload()
            play_sequence()
            play_sequence_and_acquire()
            _demodulate_and_integrate(raw_results, acquisition)
            start()
            stop()
            disconnect()
            __init__(name, address)
            __del__()
        }
        abstract class QCM extends AbstractInstrument{
            connect()
            set_device_parameter(parameter: str, value)
            setup(**kwargs)
            process_pulse_sequence(channel_pulses, nshots)
            generate_waveforms_from_pulse(pulse, modulate = True)
            upload()
            play_sequence()
            start()
            stop()
            disconnect()
            __init__(name, address)
            __del__()
        }
        class PulsarQRM extends QRM {
            __init__(name, address)
        }
        class PulsarQCM extends QCM {
            __init__(name, address)
        }
        class ClusterQRM extends QRM {
            __init__(name, address)
        }
        class ClusterQCM extends QCM {
            __init__(name, address)
        }
    }
    package rohde_schwarz.py {
        class SGS100A extends AbstractInstrument {
            power
            frequecy
            --
            connect()
            setup(**kwargs)
            start()
            stop()
            disconnect()
            --
            on()
            off()
            stop()
            __init__(name, address)
            __del__()
        }
    }
}

package pulses.py {
    class Pulse{
        start
        duration
        amplitude
        frequency
        phase
        shape
        channel
        type
        offset_i
        offset_q
        qubit
        --
        serial
        envelope_i
        envelope_q
        --
        __init__(start, duration, amplitude, frequency, phase, shape, channel, type = 'qd', offset_i=0, offset_q=0, qubit=0)
        __repr__()
    }
    class ReadoutPulse extends Pulse {
        serial
        __init__(start, duration, amplitude, frequency, phase, shape, channel, type = 'ro', offset_i=0, offset_q=0, qubit=0)
    }
    abstract class PulseShape{
        {abstract} envelope_i
        {abstract} envelope_q
    }
    class Rectangular extends PulseShape{
        envelope_i
        envelope_q
        __init__(pulse)
        __repr__()
    }
    class Gaussian extends PulseShape{
        envelope_i
        envelope_q
        __init__(pulse, rel_sigma)
        __repr__()
    }
    class Drag extends PulseShape{
        envelope_i
        envelope_q
        __init__(pulse, rel_sigma, beta)
        __repr__()
    }
    Rectangular <-- Pulse
    Gaussian <-- Pulse
    Drag <-- Pulse
}

package circuit.py {
    abstract class PulseSequence {
        ro_pulses
        qd_pulses
        qf_pulses
        pulses
        time
        phase
        serial
        __init__()
        __len__()
        add(pulse)
        add_u3(theta, phi, lam, qubit)
        add_measurement(qubit)  
    }
        class HardwareCircuit extends qibo.Circuit{
    }
    qibo.K <-- HardwareCircuit
    Pulse <-- PulseSequence
    ReadoutPulse <-- PulseSequence
}

package platforms {
    package platforms/abstract.py {
        abstract class AbstractPlatform {
            name
            runcard
            settings
            is_connected
            instruments
            instrument_settings
            --
            __init__(name, runcard)
            __call__(sequence, nshots=None)
            __getstate__()
            __setstate__()
            _check_connected()
            reload_settings()
            ..
            {abstract} run_calibration(runcard)
            connect()
            setup()
            start()
            stop()
            disconnect()
            {abstract} execute_pulse_sequence(sequence, nshots=None)
        }
    }
    package multiqubit.py {
        class MultiqubitPlatform extends AbstractPlatform {
            run_calibration()
            execute_pulse_sequence(sequence, nshots=None)
        }
        QRM <-- MultiqubitPlatform
        QCM <-- MultiqubitPlatform
        'PulsarQRM <-- multiqubit.yml
        'PulsarQCM <-- multiqubit.yml
        'ClusterQRM <-- multiqubit.yml
        'ClusterQCM <-- multiqubit.yml
        'SGS100A <-- multiqubit.yml
        PulseSequence <-- MultiqubitPlatform
        multiqubit.yml <-- MultiqubitPlatform
    }
    package qbloxplatform.py {
        class QBloxPlatform extends AbstractPlatform 

    }
    package ictplatform.py {
        class ICPlatform extends AbstractPlatform 
    }
}

package platform.py {
    entity "Platform(name, runcard)" as Platform  <<(f, LightYellow)>>
    MultiqubitPlatform <-- Platform
    QBloxPlatform <-- Platform
    ICPlatform <-- Platform
}

'hide members

@enduml