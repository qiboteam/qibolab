@startuml qibolab
!pragma layout smetana
title qibolab

package runcards {
    entity platform_runcard.yml  <<(y, orchid)>> {
        nqubits
        description
        settings
        qubits
        topology
        channels
        qubit_channel_map
        instruments
        native_gates
        characterization
    }
}
package instruments {
    package instruments/abstract.py{
        abstract class AbstractInstrument{
            name: str
            address: str
            is_connected: bool
            signature: str
            --
            {abstract} connect()
            {abstract} setup()
            {abstract} start()
            {abstract} stop()
            {abstract} disconnect()
            --
            __init__(name: str, address: str)
        }
    }
    package qblox.py{
        class WaveformsBuffer{
            SIZE: int
            class NotEnoughMemory(Exception)
            --
            __init__()
            add_waveforms(waveform_i: Waveform, waveform_q: Waveform)
        }
        class Sequencer{
            number: int
            device: QbloxSequencer
            pulses: PulseSequence
            waveforms_buffer: WaveformsBuffer
            waveforms: dict
            acquisitions: dict
            weights: dict
            program: str
            --
            __init__(number: int)
        }
        class Cluster extends AbstractInstrument{
            device: QbloxCluster
            ..
            _device_parameters: dict
            --
            connect()
            setup()
            start()
            stop()
            disconnect()
            ..
            _set_device_parameter(target, *parameters, value)
            _erase_device_parameters_cache()
        }
        class ClusterQRM_RF extends AbstractInstrument{
            DEFAULT_SEQUENCERS: dict
            SAMPLING_RATE: int
            device: QbloxQrmQcm
            ports: dict
            acquisition_hold_off: int
            acquisition_duration: int
            discretization_threshold_acq: float
            phase_rotation_acq: float
            channel_port_map: dict
            channels: list
            ..
            _cluster: QbloxCluster
            _input_ports_keys
            _output_ports_keys
            _sequencers: dict[Sequencer]
            _port_channel_map: dict
            _last_pulsequence_hash: int
            _current_pulsesequence_hash: int
            _device_parameters
            _device_num_output_ports
            _device_num_sequencers: int
            _free_sequencers_numbers: list[int]
            _used_sequencers_numbers: list[int]
            _unused_sequencers_numbers: list[int]
            --
            __init__(name: str, address: str)
            connect()
            setup(**kwargs)
            process_pulse_sequence(instrument_pulses: PulseSequence, nshots: int, repetition_duration: int)
            upload()
            play_sequence()
            play_sequence_and_acquire()
            start()
            stop()
            disconnect()
            ..
            _set_device_parameter(target, *parameters, value)
            _erase_device_parameters_cache()
            _process_acquisition_results(acquisition_results, readout_pulse: Pulse, demodulate=True)
        }
        class ClusterQCM_RF extends AbstractInstrument{
            DEFAULT_SEQUENCERS: dict
            SAMPLING_RATE: int
            device: QbloxQrmQcm
            ports: dict
            channel_port_map: dict
            channels: list
            ..
            _cluster: QbloxCluster
            _output_ports_keys
            _sequencers: dict[Sequencer]
            _port_channel_map: dict
            _last_pulsequence_hash: int
            _current_pulsesequence_hash: int
            _device_parameters
            _device_num_output_ports
            _device_num_sequencers: int
            _free_sequencers_numbers: list[int]
            _used_sequencers_numbers: list[int]
            _unused_sequencers_numbers: list[int]
            --
            __init__(name: str, address: str)
            connect()
            setup(**kwargs)
            process_pulse_sequence(instrument_pulses: PulseSequence, nshots: int, repetition_duration: int)
            upload()
            play_sequence()
            start()
            stop()
            disconnect()
            ..
            _set_device_parameter(target, *parameters, value)
            _erase_device_parameters_cache()
        }
        Cluster <.. ClusterQRM_RF
        Cluster <.. ClusterQCM_RF
        Sequencer <.. ClusterQRM_RF
        Sequencer <.. ClusterQCM_RF
        WaveformsBuffer <.. Sequencer
    }
    package rohde_schwarz.py {
        class SGS100A extends AbstractInstrument {
            device: LO_SGS100A
            power: int
            frequecy: int
            ..
            _device_parameters: dict
            --
            __init__(name: str, address: str)
            connect()
            setup(**kwargs)
            start()
            stop()
            disconnect()
            on()
            off()
            close()
            ..
            _set_device_parameter(parameter: str, value)
            _erase_device_parameters_cache()
        }
    }
    package qutech.py {
        class SPI extends AbstractInstrument {
            device: SpiRack
            s4g_modules_settings: dict
            d5a_modules_settings: dict
            dacs: dict
            ..
            _device_parameters: dict
            --
            __init__(name: str, address: str)
            connect()
            setup(**kwargs)
            start()
            stop()
            disconnect()
            set_SPI_DACS_to_cero()
            get_SPI_IDN()
            get_SPI_temperature()
            get_SPI_battery_voltage()
            close()
            ..
            _set_device_parameter(parameter: str, value)
            _erase_device_parameters_cache()
        }
    }
}

package pulses.py {
    class PulseType(Enum){
        READOUT: str
        DRIVE: str
        FLUX: str
    }
    class Waveform{
        DECIMALS: int
        --
        __init__(data: np.ndarray)
        __len__()
        __eq__(other: Waveform)
        __hash__()
        __repr__()
        plot()
    }
    abstract class PulseShape{
        SAMPLING_RATE: int
        pulse: Pulse
        {abstract} envelope_waveform_i: Waveform
        {abstract} envelope_waveform_q: Waveform
        {abstract} envelope_waveforms: tuple[Waveform, Waveform]
        {abstract} modulated_waveform_i: Waveform
        {abstract} modulated_waveform_q: Waveform
        {abstract} modulated_waveforms: tuple[Waveform, Waveform]
    }
    class Rectangular extends PulseShape{
        name: str
        envelope_waveform_i: Waveform
        envelope_waveform_q: Waveform
        --
        __init__()
        __repr__()
    }
    class Gaussian extends PulseShape{
        name: str
        envelope_waveform_i: Waveform
        envelope_waveform_q: Waveform
        --
        __init__(rel_sigma)
        __repr__()
    }
    class Drag extends PulseShape{
        name: str
        envelope_waveform_i: Waveform
        envelope_waveform_q: Waveform
        --
        __init__(rel_sigma, beta)
        __repr__()
    }
    class Pulse{
        {static} count
        --
        start: int
        duration: int
        amplitude: float
        frequency: int
        relative_phase: float
        shape: PulseShape
        channel: int | str
        type: PulseType
        qubit: int | str
        finish: int
        phase: float
        se_start: intSymbolicExpression
        se_duration: intSymbolicExpression
        se_finish: intSymbolicExpression
        serial: str
        envelope_waveform_i: Waveform
        envelope_waveform_q: Waveform
        envelope_waveforms: tuple[Waveform, Waveform]
        modulated_waveform_i: Waveform
        modulated_waveform_q: Waveform
        modulated_waveforms: tuple[Waveform, Waveform]
        --
        _start: se_int
        _duration: se_int
        _finish: se_int
        _amplitude: float
        _frequency: int
        _relative_phase: float
        _shape: PulseShape
        _channel: int | str
        _type: PulseType
        _qubit: int | str
        ._id: int
        --
        __init__(start, duration, amplitude, frequency, relative_phase, shape, channel, type=PulseType.DRIVE, qubit=0)
        __repr__()
        __hash__()
        __eq__(other)
        __add__(other)
        __mul__(n)
        __rmul__(n)
        __del__()
        copy()
        shallow_copy()
        plot()
    }
    class ReadoutPulse extends Pulse {
        serial
        __init__(start, duration, amplitude, frequency, relative_phase, shape, channel, qubit=0)
    }
    class DrivePulse extends Pulse {
        serial
        __init__(start, duration, amplitude, frequency, relative_phase, shape, channel, qubit=0)
    }
    class FluxPulse extends Pulse {
        serial
        __init__(start, duration, amplitude, frequency, relative_phase, shape, channel, qubit=0)
    }
    class SplitPulse extends Pulse {
        serial
        window_start: int
        window_finish: int
        window_duration: int
        envelope_waveform_i: Waveform
        envelope_waveform_q: Waveform
        envelope_waveforms: tuple[Waveform, Waveform]
        modulated_waveform_i: Waveform
        modulated_waveform_q: Waveform
        modulated_waveforms: tuple[Waveform, Waveform]
        --
        _window_start: int
        _window_finish: int
        --
        __init__(pulse: Pulse, window_start: int = None, window_finish: int = None)
        --
        plot()
    }
    class PulseSequence{
        serial
        count
        ro_pulses
        qd_pulses
        qf_pulses
        is_empty
        finish
        start
        duration
        channels
        --
        __init__(*pulses)
        __len__()
        __len__()
        __getitem__(index)
        __setitem__(index, value)
        __delitem__(index)
        __contains__(pulse)
        __repr__()
        __eq__(other)
        __ne__(other)
        __hash__()
        __add__(other)
        __radd__(other)
        __iadd__(other)
        __mul__(n)
        __rmul__(n)
        __imul__(n)
        add(*pulses)
        append_at_end_of_channel(*pulses)
        append_at_end_of_sequence(*pulses)
        index(pulse)
        pop(index=-1)
        remove(pulse)
        clear()
        shallow_copy()
        deep_copy()
        get_channel_pulses()
        get_pulse_overlaps()
        separate_overlapping_pulses()
        plot()
    }
    Waveform <.. PulseShape
    PulseType <.. Pulse
    Rectangular <.. Pulse
    Gaussian <.. Pulse
    Drag <.. Pulse
    Pulse <.. PulseSequence
    ReadoutPulse <.. PulseSequence
    DrivePulse <.. PulseSequence
    FluxPulse <.. PulseSequence
    SplitPulse <.. PulseSequence
}



package platforms {
    package platforms/abstract.py {
        abstract class AbstractPlatform {
            name: str
            runcard: str
            is_connected: bool
            settings: dict
            nqubits: int
            resonator_type: str
            hardware_avg: int
            sampling_rate: int
            repetition_duration: int
            qubits: list
            topology: list
            channels: list
            qubit_channel_map: dict
            characterization: dict
            native_gates: dict
            qubit_instrument_map: dict
            instruments: dict
            ro_channel: dict
            qd_channel: dict
            qf_channel: dict
            qrm: dict
            qcm: dict
            qbm: dict
            ro_port: dict
            qd_port: dict
            qf_port: dict
            --
            __init__(name: str, runcard: str)
            __call__(sequence: PulseSequence, nshots=None)
            __repr__()
            __getstate__()
            __setstate__(data)
            connect()
            setup()
            start()
            stop()
            disconnect()
            reload_settings()
            transpile()
            {abstract} run_calibration(show_plots=False)
            {abstract} execute_pulse_sequence(sequence: PulseSequence, nshots: int = None)
            create_RX90_pulse(qubit, start=0, relative_phase=0)
            create_RX_pulse(qubit, start=0, relative_phase=0)
            create_MZ_pulse(qubit, start)
            create_qubit_drive_pulse(qubit, start, duration, relative_phase=0)
            create_qubit_readout_pulse(qubit, start)
            --
            _check_connected()
        }
        platform_runcard.yml <.. AbstractPlatform
    }
    package multiqubit.py {
        class MultiqubitPlatform extends AbstractPlatform {
            run_calibration()
            execute_pulse_sequence(sequence: PulseSequence, nshots=None)
        }
        Cluster <.. MultiqubitPlatform
        ClusterQRM_RF <.. MultiqubitPlatform
        ClusterQCM_RF <.. MultiqubitPlatform
        SPI <.. MultiqubitPlatform
        SGS100A <.. MultiqubitPlatform
        PulseSequence <.. MultiqubitPlatform
    }
    package ictplatform.py {
        class ICPlatform extends AbstractPlatform
    }
}

package platform.py {
    entity "Platform()" as Platform  <<(f, LightYellow)>>
    MultiqubitPlatform <.. Platform
    ICPlatform <.. Platform
    DummyPlatform <.. Platform
}

package backends.py {
    class QibolabBackend extends qibo.backends.NumpyBackend {
        name: str
        platform:AbstractPlatform
        --
        __init__(platform, runcard=None)
        apply_gate(gate, state, nqubits)
        apply_gate_density_matrix(gate, state, nqubits)
        execute_circuit(circuit, initial_state=None, nshots=None)
        circuit_result_tensor(result)
        circuit_result_representation(result: CircuitResult)
        circuit_result_probabilities(result: CircuitResult, qubits=None)
    }
    qibo.core.circuit.Circuit <.. QibolabBackend
    Platform <.. QibolabBackend
    'PulseSequence <.. QibolabBackend
}

hide members

@enduml
