@startuml Instrument_changes
!pragma layout smetana
title Instrument Changes
package instrument {
    package abstract.py {
        abstract class AbstractInstrument_New{
            name
            ip
            is_connected
            signature
            device
            --

            --
            __init__(name, ip)
            __del__()
            {abstract} connect()
            {abstract} setup()
            {abstract} start()
            {abstract} stop()
            {abstract} disconnect()
        }
    }
    package instrument.py {
        abstract class Instrument_Old{
            _connected
            ip
            _signature
            device
            --
            signature
            --
            __init__(ip)
            {abstract} connect
            {abstract} close
        }
    }
    package rohde_schwarz.py {
        class SGS100A_New extends AbstractInstrument_New{
            device
            power
            frequency
            __init__(name, ip)
            connect()
            setup(**kwargs)
            start()
            stop()
            disconnect()
            --
            on()
            off()
            close()
        }
        class SGS100A_Old extends Instrument_Old{
            device
            _power
            _frequency
            _connected
            _signature
            label
            __init__(label, ip)
            connect()
            setup(power, frequency)
            set_power(power)
            set_frequency(frequency)
            get_power()
            get_frequency()
            on()
            off()
            close()
        }
    }
    package qblox.py_New {
        class ClusterQRM_New extends AbstractInstrument_New{
            sequencer_channel_map
            last_pulsequence_hash
            current_pulsesequence_hash
            kwargs = settings['shared_settings'] & instrument_settings[name]['setup']
            wait_loop_step = 1000
            waveform_max_length = 16384//2
            sequencers
            sequencer_channel_map
            waveforms
            acquisitions
            program
            weights
            gain
            __init__(name, ip)
            connect()
            setup(**kwargs)
            _get_start(pulse)
            process_pulse_sequence(channel_pulses, nshots)
            generate_waveforms_from_pulse(pulse, modulate = True)
            upload()
            play_sequence()
            play_sequence_and_acquire()
            _demodulate_and_integrate(raw_results, acquisition)
            start()
            stop()
            disconnect()
        }
        class ClusterQCM_New extends AbstractInstrument_New{
            sequencer_channel_map
            last_pulsequence_hash
            current_pulsesequence_hash
            kwargs = settings['shared_settings'] & instrument_settings[name]['setup']
            wait_loop_step = 1000
            waveform_max_length = 16384//2
            sequencers
            sequencer_channel_map
            waveforms
            program
            gain
            __init__(name, ip)
            connect()
            setup(**kwargs)
            _get_start(pulse)
            process_pulse_sequence(channel_pulses, nshots)
            generate_waveforms_from_pulse(pulse, modulate = True)
            upload()
            play_sequence()
            start()
            stop()
            disconnect()
        }
    }
    package qblox.py_Old {
        class GenericPulsar_Old extends Instrument_Old{
            label
            sequencer
            ref_clock
            sync_en
            is_cluster
            _connected
            Device
            device
            name
            hardware_avg
            initial_delay
            repetition_duration
            delay_before_readout
            wait_loop_step
            duration_base
            acquisitions
            weights
            gain
            __init__(label, ip, sequencer, ref_clock, sync_en, is_cluster)
            connect()
            setup(gain, initial_delay, repetition_duration)
            {static} _translate_single_pulse(pulse)
            generate_waveforms(pulses)
            generate_program(hardware_avg, initial_delay, delay_before_readout, acquire_instruction, wait_time)
            {abstract} translate(sequence, delay_before_readout, nshots)
            upload(waveforms, program, data_folder)
            play_sequence()
            stop()
            close()
        }
        class PulsarQRM_Old extends GenericPulsar_Old{
            hardware_avg_en
            start_sample
            integration_length
            sampling_rate
            mode
            __init__(label, ip, ref_clock="external", sequencer=0, sync_en=True, hardware_avg_en=True, acq_trigger_mode="sequencer", is_cluster=True)
            setup(gain, initial_delay, repetition_duration, start_sample, integration_length, sampling_rate, mode)
            translate(sequence, delay_before_readout, nshots)
            play_sequence_and_acquire(ro_pulse)
            _demodulate_and_integrate(single_acq, ro_pulse)
        }   
        class PulsarQCM_Old extends GenericPulsar_Old{
            __init__(label, ip, sequencer=0, ref_clock="external", sync_en=True, is_cluster=True)
            translate(sequence, delay_before_read_out, nshots=None)
        }
    }
}


'hide members

@enduml